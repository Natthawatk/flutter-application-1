import 'dart:convert';
import 'dart:developer';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:flutter_application_1/config/api_config.dart';
import 'package:flutter_application_1/model/response/trip_get_res.dart';

class TripPage extends StatefulWidget {
  final int idx;
  const TripPage({super.key, required this.idx});

  @override
  State<TripPage> createState() => _TripPageState();
}

class _TripPageState extends State<TripPage> {
  Trip? trip;
  bool isLoading = true;
  String errorMessage = '';

  @override
  void initState() {
    super.initState();
    _loadTripDetail();
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏£‡∏¥‡∏õ‡∏à‡∏≤‡∏Å database
  Future<void> _loadTripDetail() async {
    try {
      setState(() {
        isLoading = true;
        errorMessage = '';
      });

      log('üöÄ Loading trip detail for idx: ${widget.idx}');
      final response = await http.get(
        Uri.parse(ApiConfig.tripDetailUrl(widget.idx)),
        headers: ApiConfig.headers,
      );

      log('üì• Trip detail response status: ${response.statusCode}');
      log('üì• Trip detail response body: ${response.body}');

      if (response.statusCode == 200) {
        final tripData = json.decode(response.body);
        trip = Trip.fromJson(tripData);
        log('‚úÖ Loaded trip detail successfully: ${trip!.name}');
      } else {
        setState(() {
          errorMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏£‡∏¥‡∏õ‡πÑ‡∏î‡πâ: ${response.statusCode}';
        });
      }
    } catch (error) {
      log('‚ùå Error loading trip detail: $error');
      setState(() {
        errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå';
      });
    } finally {
      setState(() {
        isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(trip?.name ?? '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏£‡∏¥‡∏õ'),
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => Navigator.of(context).pop(),
        ),
      ),
      body: isLoading
          ? const Center(child: CircularProgressIndicator())
          : errorMessage.isNotEmpty
              ? _buildErrorWidget()
              : trip != null
                  ? _buildTripDetailWidget()
                  : const Center(child: Text('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏£‡∏¥‡∏õ')),
    );
  }

  // Widget ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
  Widget _buildErrorWidget() {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(32.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.error_outline, size: 64, color: Colors.red.shade300),
            const SizedBox(height: 16),
            Text(
              errorMessage,
              style: TextStyle(color: Colors.red.shade600),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: _loadTripDetail,
              child: const Text('‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà'),
            ),
          ],
        ),
      ),
    );
  }

  // Widget ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏£‡∏¥‡∏õ
  Widget _buildTripDetailWidget() {
    const primaryColor = Color(0xFF8A5DB3);
    
    return RefreshIndicator(
      onRefresh: _loadTripDetail,
      child: SingleChildScrollView(
        physics: const AlwaysScrollableScrollPhysics(),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏Å
            _buildCoverImage(),
            
            // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
            _buildBasicInfo(primaryColor),
            
            // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
            _buildDetailSection(),
            
            // ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏≠‡∏á
            _buildBookingButton(primaryColor),
            
            const SizedBox(height: 32),
          ],
        ),
      ),
    );
  }

  // Widget ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏Å
  Widget _buildCoverImage() {
    return Container(
      width: double.infinity,
      height: 250,
      child: Image.network(
        trip!.coverimage,
        fit: BoxFit.cover,
        loadingBuilder: (context, child, loadingProgress) {
          if (loadingProgress == null) return child;
          return Container(
            color: Colors.grey[300],
            child: const Center(child: CircularProgressIndicator()),
          );
        },
        errorBuilder: (context, error, stackTrace) {
          return Container(
            color: Colors.grey[300],
            child: const Center(
              child: Icon(Icons.broken_image, size: 64, color: Colors.grey),
            ),
          );
        },
      ),
    );
  }

  // Widget ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
  Widget _buildBasicInfo(Color primaryColor) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            trip!.name,
            style: const TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 16),
          
          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Card
          Card(
            elevation: 2,
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                children: [
                  _buildInfoRow(Icons.public, '‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®', trip!.country),
                  const Divider(),
                  _buildInfoRow(Icons.calendar_today, '‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤', '${trip!.duration} ‡∏ß‡∏±‡∏ô'),
                  const Divider(),
                  _buildInfoRow(Icons.attach_money, '‡∏£‡∏≤‡∏Ñ‡∏≤', '${trip!.price.toStringAsFixed(0)} ‡∏ö‡∏≤‡∏ó'),
                  const Divider(),
                  _buildInfoRow(Icons.location_on, '‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á', trip!.destinationZone),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  // Widget ‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  Widget _buildInfoRow(IconData icon, String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Row(
        children: [
          Icon(icon, color: const Color(0xFF8A5DB3), size: 24),
          const SizedBox(width: 12),
          Text(
            '$label: ',
            style: const TextStyle(
              fontWeight: FontWeight.w600,
              fontSize: 16,
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: const TextStyle(fontSize: 16),
            ),
          ),
        ],
      ),
    );
  }

  // Widget ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
  Widget _buildDetailSection() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏£‡∏¥‡∏õ',
            style: TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 12),
          Card(
            elevation: 2,
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Text(
                trip!.detail,
                style: const TextStyle(
                  fontSize: 16,
                  height: 1.5,
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  // Widget ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏≠‡∏á
  Widget _buildBookingButton(Color primaryColor) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: SizedBox(
        width: double.infinity,
        height: 50,
        child: ElevatedButton(
          onPressed: () {
            _showBookingConfirmation();
          },
          style: ElevatedButton.styleFrom(
            backgroundColor: primaryColor,
            foregroundColor: Colors.white,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(25),
            ),
            elevation: 3,
          ),
          child: Text(
            '‡∏à‡∏≠‡∏á‡∏ó‡∏£‡∏¥‡∏õ‡∏ô‡∏µ‡πâ - ${trip!.price.toStringAsFixed(0)} ‡∏ö‡∏≤‡∏ó',
            style: const TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
      ),
    );
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
  void _showBookingConfirmation() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏£‡∏¥‡∏õ "${trip!.name}" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?'),
              const SizedBox(height: 16),
              Text('‡∏£‡∏≤‡∏Ñ‡∏≤: ${trip!.price.toStringAsFixed(0)} ‡∏ö‡∏≤‡∏ó'),
              Text('‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: ${trip!.duration} ‡∏ß‡∏±‡∏ô'),
              Text('‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®: ${trip!.country}'),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
            ),
            FilledButton(
              onPressed: () {
                Navigator.of(context).pop();
                _processBooking();
              },
              child: const Text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á'),
            ),
          ],
        );
      },
    );
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
  void _processBooking() {
    // TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≠‡∏á‡∏ó‡∏£‡∏¥‡∏õ
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('‡∏à‡∏≠‡∏á‡∏ó‡∏£‡∏¥‡∏õ "${trip!.name}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!'),
        backgroundColor: Colors.green,
        duration: const Duration(seconds: 3),
      ),
    );
    
    log('‚úÖ Trip booking confirmed: ${trip!.name} (idx: ${trip!.idx})');
  }
}